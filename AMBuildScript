# vim: set ts=8 sts=2 sw=2 tw=99 et ft=python: 
import os

# hack to avoid 'no clone attribute' error
class NullCompiler(object):
  def clone(self):
    return self

builder.compiler = NullCompiler()

class SMX(object):
  def __init__(self):
    self.spcomp = None
    self.spcomp_dir = None
    self.spcomp_argv = []

  def detectSPComp(self):
    if builder.options.spcomp_dir:
      self.spcomp_dir = builder.options.spcomp_dir
    
    if not self.spcomp_dir or not os.path.isdir(self.spcomp_dir):
      raise Exception('Could not find a valid copy of spcomp')
    self.spcomp_dir =  os.path.abspath(os.path.normpath(self.spcomp_dir))
    self.spcomp = os.path.join(self.spcomp_dir, 'spcomp')

  def configure(self):
    if builder.target_platform == 'windows':
      self.spcomp += '.exe'
    
    self.spcomp_argv = [
      os.path.join(builder.buildPath, self.spcomp),
      '-i' + os.path.relpath(os.path.join(builder.buildPath, 'includes'),
                             os.path.join(builder.buildPath, builder.buildFolder)),
      '-i' + os.path.join(builder.sourcePath, 'scripting', 'include'),
      '-h',
      '-E',
      '-v0',
    ]

  def Plugin(self, script_path, smx_file, output_dir = ''):
    script_output_dir = os.path.normpath(output_dir)
    
    # prevent adding cwd, ambuild tries to nuke it
    if os.path.realpath(os.getcwd()) != os.path.realpath(script_output_dir):
      builder.AddFolder(script_output_dir)
    
    inputs = [
      self.spcomp,
      script_path,
    ]
    outputs = [
      os.path.join(script_output_dir, smx_file)
    ]
    argv = self.spcomp_argv + [script_path, '-D' + script_output_dir + os.sep]
    cmd_entry, (smx_entry,) = builder.AddCommand(
      inputs = inputs,
      argv = argv,
      outputs = outputs,
      dep_type = 'msvc',
    )

SPCompiler = SMX()
SPCompiler.detectSPComp()
SPCompiler.configure()

BuildScripts = [
  'AMBuilder',
]

if builder.backend == 'amb2':
  BuildScripts += [
    # 'PackageScript',
  ]

builder.RunBuildScripts(BuildScripts, { 'SourcePawn': SPCompiler })
